<div id="post-form">
</div>

<script type="text/template" id="assignments-choice-template">
<h6>Assignment</h6>
<select class="assignments-select">
<option value="">Select an Assignment</option>
</select>
</script>

<script type="text/template" id="categories-choice-template">
<h6>Category</h6>
<a href="#">Unset Category</a>
</script>

<script type="text/template" id="category-template">
  <div class="toggle-button category-select {{#if selected}}selected{{/if}}">{{name}}</div>
</script>

<script type="text/template" id="post-form-template">
  <div class="col-12">
  <h1 class="page-title">
  {{#if id }}
    Edit Post
  {{else}}
    New Post
  {{/if}}
  </h1>
  </div>

<div class='col-9'>
  <h3>
    <input type="text" id="post-title" name="post[title]" placeholder="Title of Post..." value="{{ title }}"/>
  </h3>

  <div class="categories-choice section">
  </div>

  <div class="assignments-choice section">
  </div>

  <h6>Content <span class="markdown-mark">&nbsp;</span></h6>
  <div class="expanding-area" style="background:#eee;">
    <pre><span></span><br></pre>
    <textarea id="post-content-form" placeholder="Write your post here..." name="post[content]" style="border-color: #eee;border-bottom: none;">{{content}}</textarea>
  </div>
  <div class="info">
    <h6>Formatting</h6>
    <p>Posts are formatted using Markdown. Click the icon to the right of "Content" up above to view a Markdown cheatsheet.</p>

    <h6>Adding Images</h6>
    <p>To add an image, drag and drop the image inside the textbox. To embed videos, paste the embed code from whatever site you uploaded your video to.</p>
    </div>

  <div class="section privacy">
    <h6>Privacy</h6>
    <div class="toggle-button" data-value="false">
      NYU
    </div>

    <div class="toggle-button" data-value="true">
      World
    </div>
  </div>

  <div id="post-submit" class="action-buttons">
    <button id="private" name="post[draft]" value="true">Draft</button>
    <button id="public" name="post[draft]" value="false">{{#if id }}Update{{else}}Publish{{/if}}</button>
  </div>
</div>
</script>

<script>
//
// MODELS
//
var Post = Backbone.Model.extend({});
var Category = Backbone.Model.extend();
var Assignment = Backbone.Model.extend();

//
// COLLECTIONS
//
var Assignments = Backbone.Collection.extend({
  model: Assignment
});

var Categories = Backbone.Collection.extend({
  model: Category,

  setCategory: function (categoryId) {
    this.forEach(function (category) {
      if (category.get('id') === categoryId) {
        category.set('selected', true);
      } else {
        category.unset('selected');
      }
    });
  },

  unsetCategory: function () {
    this.forEach(function (category) {
      category.unset('selected');
    });
  }
});

//
// VIEWS
//
jQuery(function () {
  var PostView = Backbone.View.extend({
    initialize: function(){
      this.render().el;
      this.model.assignments.bind('change:assignment', this.setAssignment, this);
    },

    el: '#post-form',

    events: {
      'click .privacy .toggle-button' : 'changePrivacy'
    },

    templateSource: $('#post-form-template').html(),

    render: function(){
      var template = Handlebars.compile( this.templateSource );
      this.$el.html( template(this.model.toJSON()) );

      this.assignmentsSelect = new AssignmentsView({collection: this.model.assignments});
      this.categorySelect = new CategoriesView({collection: this.model.categories});

      bindExpandingAreas();
      return this;
    },

    changePrivacy: function () {

    },

    setAssignment: function () {
      this.model.set('assignment_id', this.$el.find('.assignments-select').val());
    }
  });

  var CategoriesView = Backbone.View.extend({
    initialize: function () {
      this.render().el;
      this.collection.bind('change', this.render, this);
    },

    el: '.categories-choice',

    events: {
      'click a': 'unsetCategory'
    },

    unsetCategory: function () {
      this.collection.unsetCategory();
      return false;
    },

    templateSource: Handlebars.compile($('#categories-choice-template').html()),

    render: function () {
      this.$el.html(this.templateSource());
      this.collection.forEach(function (category) {
        var categoryV = new CategoryView({model: category});
        this.$el.append(categoryV.render().el);
      }, this);
      return this;
    }
  });

  var CategoryView = Backbone.View.extend({
    initialize: function () {
      this.render().el;
    },

    events: {
      'click': 'setCategory'
    },

    setCategory: function () {
      this.model.collection.setCategory(this.model.id);
    },

    render: function () {
      var categoryTemplate = Handlebars.compile($('#category-template').html());
      this.$el.html(categoryTemplate(this.model.toJSON()));
      return this;
    }
  })

  var AssignmentsView = Backbone.View.extend({
    initialize: function () {
      this.render().el;
    },

    events: {
      'change .assignments-select' : 'chooseAssignment'
    },

    el: '.assignments-choice',

    templateSource: $('#assignments-choice-template').html(),

    chooseAssignment: function () {
      this.trigger('change:assignment');
    },

    render: function () {
      var template = Handlebars.compile(this.templateSource);
      var c = this.collection.toJSON();
      this.$el.html(template(this.collection.toJSON()));
      this.collection.forEach(function (assignment) {
        var assignmentTemplate = Handlebars.compile('<option value="{{ id }}">{{ title }}</option>')(assignment.toJSON());
        this.$el.find('.assignments-select').append(assignmentTemplate);
      }, this);
      $('.assignments-select').chosen();
      return this;
    }
  });

  window.post = new Post(<%= @post.to_json %>);
  post.assignments =  new Assignments(<%= @assignments.to_json %>);
  post.categories = new Categories(<%= @categories.to_json %>);

  var postView = new PostView({model: post});
});
</script>
